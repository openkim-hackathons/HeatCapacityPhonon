# Set up logging.
log output/lammps_equilibration.log

# Set the OpenKIM model and units that will be used.
kim init ${modelname} metal unit_conversion_mode

# Periodic boundary conditions along all three dimensions.
boundary p p p 

# Explicitly include neighbor list command so that it can be changed conveniently.
neigh_modify delay 0 every 1 check yes one 2000

# Read initial zero-temperature crystal.
read_data output/zero_temperature_crystal.lmp

# Change to triclinic box.
change_box all triclinic

# Convert box and all atomic positions to the correct units.
change_box all x scale ${_u_distance} &
               y scale ${_u_distance} &
               z scale ${_u_distance} &
               xy final $(xy*v__u_distance) &
               xz final $(xz*v__u_distance) &
               yz final $(yz*v__u_distance) &
               remap

# Interatomic potential and neighbor settings
kim interactions ${species}

# Sample initial velocities.
velocity all create $(v_temperature*v__u_temperature) ${temperature_seed}

# Equilibrate in NPT ensemble.
fix NPT all npt temp $(v_temperature*v__u_temperature) $(v_temperature*v__u_temperature) $(v_temperature_damping*v__u_time) &
                tri $(v_pressure*v__u_pressure) $(v_pressure*v__u_pressure) $(v_pressure_damping*v__u_time)

# Define variables in proper units.
variable pe_metal equal "c_thermo_pe/v__u_energy"
variable temp_metal equal "c_thermo_temp/v__u_temperature"
variable press_metal equal "c_thermo_press/v__u_pressure"
variable vol_metal equal vol/${_u_distance}/${_u_distance}/${_u_distance}
variable xlo_metal equal xlo/${_u_distance}
variable xhi_metal equal xhi/${_u_distance}
variable ylo_metal equal ylo/${_u_distance}
variable yhi_metal equal yhi/${_u_distance}
variable zlo_metal equal zlo/${_u_distance}
variable zhi_metal equal zhi/${_u_distance}
variable xy_metal equal xy/${_u_distance}
variable xz_metal equal xz/${_u_distance}
variable yz_metal equal yz/${_u_distance}

# Set up logging of thermodynamic information.
thermo_style custom step v_pe_metal v_temp_metal v_press_metal v_vol_metal &
                         v_xlo_metal v_xhi_metal v_ylo_metal v_yhi_metal v_zlo_metal v_zhi_metal &
                         v_xy_metal v_xz_metal v_yz_metal
thermo ${number_sampling_timesteps}

# Store unwrapped coordinates for every atom. 
# Note that Lammps cannot store scaled unwrapped coordinates (it can only dump them).
# This is why we have to implement the scaling ourselves.
compute up all property/atom xu yu zu

# In Lammps, the unscaled (x, y, z) coordinates are connected to the scaled (xs, ys, zs) 
# coordinates as (x-xlo, y-ylo, z-zlo) = xs a + ys b + zs c, where (a, b, c) are the 
# non-orthogonal vectors of the simulation box edges (see https://docs.lammps.org/dump.html). 
# This means that (x, y, z)^T = M (xs, ys, zs)^T, where we used matrix multiplication and the 
#  matrix M is given by (see https://docs.lammps.org/Howto_triclinic.html):
#     (xhi-xlo    xy        xz  )
# M = (   0    yhi - ylo    yz  )
#     (   0       0      zhi-zlo)
# This matrix can be inverted to yield the equations that are implemented below to obtain the scaled 
# unwrapped positions from the unwrapped positions.
variable xsu atom "(c_up[1]-xlo)/(xhi-xlo) - (xy*(c_up[2]-ylo))/((xhi-xlo)*(yhi-ylo)) + ((xy*yz-(yhi-ylo)*xz)*(c_up[3]-zlo))/((xhi-xlo)*(yhi-ylo)*(zhi-zlo))"
variable ysu atom "(c_up[2]-ylo)/(yhi-ylo) - (yz*(c_up[3]-zlo))/((yhi-ylo)*(zhi-zlo))"
variable zsu atom "(c_up[3]-zlo)/(zhi-zlo)"

# Since Lammps can dump scaled unwrapped coordinates, one can test above variables by including the following two lines:
# dump test all custom 1000 output/test.dump.* id xsu ysu zsu v_xsu v_ysu v_zsu
# dump_modify test first no

# Average the scaled unwrapped positions.
# Note that kim-convergence interrupts simulations after 1000 timesteps.
# We write out the average scaled unwrapped positions after every 1000 timesteps.
fix avePos all ave/atom 1 1000 1000 v_xsu v_ysu v_zsu
dump avePosDump all custom 1000 output/average_position.dump.* id f_avePos[1] f_avePos[2] f_avePos[3]

# Prevent dump at timestep 0.
dump_modify avePosDump delay 1000

# Set timestep.
timestep $(v_timestep*v__u_time)

# Temperature may be off because of rigid bodies or SHAKE constraints.
# See https://docs.lammps.org/velocity.html
run 0
velocity all scale $(v_temperature*v__u_temperature)

# Set up convergence check with kim-convergence.
python run_length_control input 6 SELF 1 variable vol_metal variable temp_metal format pissss file run_length_control.py

# Run until converged.
python run_length_control invoke

# Print the final volume.
print ${vol_metal} screen no file output/final_volume.dat

# Reset.
unfix NPT
unfix avePos
unfix cr_fix  # From run_length_control.py
undump avePosDump
reset_timestep 0

# Write the initial starting file for a true simulation.
write_restart output/equilibrated.restart
